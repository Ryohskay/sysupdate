#!/usr/bin/env bash
# default variables
VERSION="0.0.0"

function usage() {
  cat <<EOM

Usage: $(basename $0) [arg1] [arg2]...

    -a      Select apt as the native package manager
    -d      Select dnf as the native package manager
    -n      Execute the native package manager (apt, dnf, etc) only
    -y		Confirm all installation beforehand and skip any prompt
    -h      Display this 'help' dialogue

EOM
}

# catch CLI options
while (($#>0)); do
  case $1 in
    a|-a|--apt)
      SYS_PKG="apt"
      ;;
    n|-n|--native)
      PACUP_MOD="native"
      ;;
    y|-y|--yes)
      PACUP_YES=" -y"
      ;;
    h|-h|--help)
      usage
      exit 0
      ;;
    *)
      usage
      exit 1
      ;;
  esac
  shift
done

function PACUP_APT() {
  echo -e "\nExecuting: $SUBEXEC apt-get update"
  $SUBEXEC apt-get update
  echo -e "\nExecuting: $SUBEXEC apt-get full-upgrade$PACUP_YES"
  $SUBEXEC apt-get full-upgrade$PACUP_YES
  echo -e "\nExecuting: $SUBEXEC apt-get autoremove$PACUP_YES --fix broken"
  $SUBEXEC apt-get autoremove$PACUP_YES --fix-broken
}

function PACUP_DNF() {
    PACUP_RHEL
}

function PACUP_YUM() {
    PACUP_RHEL
}

function PACUP_RHEL() {
    # Common update process for DNF and YUM
    echo -e "\nExecuting: $SUBEXEC $SYS_PKG upgrade$PACUP_YES"
    $SUBEXEC $SYS_PKG upgrade$PACUP_YES
    echo -e "\nExecuting: $SUBEXEC $SYS_PKG autoremove$PACUP_YES"
    $SUBEXEC $SYS_PKG autoremove$PACUP_YES
}

function PACUP_OBSD() {
    # updating process for OpenBSD
    if ! $(test -d ~/.pacup_bsd); then
        echo -e "\nCreating a utility directory ~/.pacup_bsd"
        mkdir -p $HOME/.pacup_bsd
    fi
    echo -e "\nExecuting: $SUBEXEC syspatch"
    $SUBEXEC syspatch | tee $HOME/.pacup_bsd/patch.txt
    echo "syspatch update messages are recorded in $HOME/.pacup_bsd/patch.txt"
    echo -e "\nExecuting: $SUBEXEC pkg_add -uU"
    $SUBEXEC pkg_add -uU | tee $HOME/.pacup_bsd/pkgadd.txt
    echo "update messages are recorded in $HOME/.pacup_bsd/pkgadd.txt"
}

function PACUP_PKG() {
    # updating process for FreeBSD's pkg toolchain
    if ! $(test -d ~/.pacup_bsd); then
        echo -e "\nCreating a utility directory ~/.pacup_bsd"
        mkdir -p $HOME/.pacup_bsd
    fi
    echo -e "\nExecuting: $SUBEXEC pkg upgrade"
    $SUBEXEC pkg upgrade | tee $HOME/.pacup_bsd/pkg_upgrade.txt
    echo -e "\nUpdate messages are recorded in $HOME/.pacup_bsd/pkg_upgrade.txt"

    echo -e "\nExecuting: $SUBEXEC pkg autoremove"
    $SUBEXEC pkg autoremove

    pkg audit | tee $HOME/.pacup_bsd/pkg_audit.txt
    echo -e "\nAuditing messages are recorded in $HOME/.pacup_bsd/pkg_audit.txt"

    echo -e "\nExecuting: $SUBEXEC freebsd-update fetch"
    $SUBEXEC freebsd-update fetch

    echo -e "\nExecuting: $SUBEXEC freebsd-update install"
    $SUBEXEC freebsd-update install | tee $HOME/.pacup_bsd/freebsd-patches.txt
    echo -e "\nSecurity patch messages are recorded in $HOME/.pacup_bsd/freebsd-patches.txt"

    uname -r > $HOME/.pacup_bsd/uname
    freebsd-version -k > $HOME/.pacup_bsd/fbsd_k
    if [ "$(uname -r)" != "$(freebsd-version -k)" ]; then
        echo -e "\nFreeBSD's kernel has been updated. Please restart the system to fully apply patches."
    fi
}

function PACUP_PKGIN() {
    # a process for NetBSD's pkgin tool
    if ! $(test -d ~/.pacup_bsd); then
        echo -e "\nCreating a utility directory ~/.pacup_bsd"
        mkdir -p $HOME/.pacup_bsd
    fi
    echo -e "\nExecuting: $SUBEXEC pkgin$PACUP_YES update"
    $SUBEXEC pkgin$PACUP_YES update
    echo -e "\nExecuting: $SUBEXEC pkgin$PACUP_YES upgrade"
    $SUBEXEC pkgin$PACUP_YES upgrade | tee $HOME/.pacup_bsd/pkg_upgrade.txt
    echo "update messages are recorded in $HOME/.pacup_bsd/pkg_upgrade.txt"

    echo -e "\nExecuting: $SUBEXEC pkgin$PACUP_YES autoremove"
    $SUBEXEC pkgin$PACUP_YES autoremove
    echo -e "\nExecuting: $SUBEXEC pkgin$PACUP_YES clean"
    $SUBEXEC pkgin$PACUP_YES clean
}

function PACUP_SYS() {
  if [ $(command -v snap) ]; then
    echo -e "\nExecuting: sudo snap refresh"
    $SUBEXEC snap refresh
  fi
  if [ $(command -v brew) ]; then
    echo -e "\nDetected homebrew."
    echo -e "\nExecuting: brew update$PACUP_YES"
    brew update
  fi
  if [ $(command -v flatpak) ]; then
    echo -e "\nExecuting: flatpak update$PACUP_YES"
    flatpak update$PACUP_YES
  fi
}


echo -e "pacup v$VERSION"

# initialise SYS_PKG
if [ $(command -v dnf) ]; then
    echo -e "\nDetected dnf package manager"
    SYS_PKG="dnf"
elif [ $(command -v yum) ]; then
    echo -e "\nDetected yum package manager"
    SYS_PKG="yum"
elif [ $(command -v pkgin) ]; then
    echo -e "\nDetected pkgin package manager"
    SYS_PKG="pkgin"
elif [ $(command -v pkg_add) ]; then
    echo -e "\nDetected BSD pkg_\* tools"
    SYS_PKG="pkg_add"
elif [ $(command -v pkg) ]; then
    echo -e "\nDetected FreeBSD's pkg"
    SYS_PKG="pkg"
else
    SYS_PKG="apt"
fi

# ROOT privilege check
# initialise SUBEXEC and detect doas
SUBEXEC="sudo"
if [ $(command -v doas) ]; then
    echo "Detected doas"
    SUBEXEC="doas"
    doas echo -n
else
    sudo echo -n
fi

# sudo/doas escalation
if [ $? != 0 ]; then
  echo -e "\nThis program requires administrator (usually ROOT) privileges.\nPlease try again.\n"
  $SUBEXEC echo -n  # Run sudo/doas again if first attempt fails
  if [ $? != 0 ]; then
    echo -e "\nAuthentication failure. Quitting ..."
    # exit the program if the second attempt still failed
    exit 1
  fi
fi

# run native package manager updates
if [ "$SYS_PKG" == "apt" ]; then
  PACUP_APT
elif [ "$SYS_PKG" == "dnf" ]; then
  PACUP_DNF
elif [ "$SYS_PKG" == "yum" ]; then
  PACUP_YUM
elif [ "$SYS_PKG" == "pkgin" ]; then
  PACUP_PKGIN
elif [ "$SYS_PKG" == "pkg_add" ]; then
  PACUP_OBSD
elif [ "$SYS_PKG" == "pkg" ]; then
  PACUP_PKG
fi

# exit if the user chose the native only option
if [ "$PACUP_MOD" == "native" ]; then
    echo -e "\nCompleted update"
    exit 0
fi

# update other system package management tools
PACUP_SYS
echo -e "\nCompleted update"
exit 0
