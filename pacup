#!/usr/bin/env bash

function usage() {
  cat <<EOM

Usage: $(basename $0) [arg1] [arg2]...

    -a      Select apt as the native package manager
    -d      Select dnf as the native package manager
    -n      Execute the native package manager (apt, dnf, etc) only
    -y		Confirm all installation beforehand and skip any prompt
    -h      Display this 'help' dialogue

EOM
}

# catch CLI options
while (($#>0)); do
  case $1 in
    a|-a|--apt)
      SYS_PKG="apt"
      ;;
    n|-n|--native)
      PACUP_MOD="native"
      ;;
    y|-y|--yes)
      PACUP_YES=" -y"
      ;;
    h|-h|--help)
      usage
      exit 0
      ;;
    *)
      usage
      exit 1
      ;;
  esac
  shift
done

function PACUP_APT() {
  echo -e "\nExecuting: sudo apt-get update"
  $SUBEXEC apt-get update
  echo -e "\nExecuting: sudo apt-get full-upgrade$PACUP_YES"
  $SUBEXEC apt-get full-upgrade$PACUP_YES
  echo -e "\nExecuting: sudo apt-get autoremove$PACUP_YES --fix broken"
  $SUBEXEC apt-get autoremove$PACUP_YES --fix-broken
}

function PACUP_SYS() {
  if [ $(command -v snap) ]; then
    echo -e "\nExecuting: sudo snap refresh"
    $SUBEXEC snap refresh
  fi
  if [ $(command -v brew) ]; then
    echo -e "\n Detected homebrew."
    echo -e "\nExecuting: brew update$PACUP_YES"
    brew update
  fi
  if [ $(command -v flatpak) ]; then
    echo -e "\nExecuting: flatpak update$PACUP_YES"
    flatpak update$PACUP_YES
  fi
}

# initialise SYS_PKG
if [ $(command -v dnf) ]; then
    echo -e "\nDetected dnf package manager"
    SYS_PKG="dnf"
elif [ $(command -v yum) ]; then
    echo -e "\n Detected yum package manager"
    SYS_PKG="yum"
else
    SYS_PKG="apt"
fi

# ROOT privilege check
# initialise SUBEXEC and detect doas
SUBEXEC="sudo"
if [ $(command -v doas) ]; then
    echo "Detected doas"
    SUBEXEC="doas"
    doas echo -n
else
    sudo echo -n
fi

# sudo/doas escalation
if [ $? != 0 ]; then
  echo -e "\nThis program requires administrator (usually ROOT) privileges.\nPlease try again.\n"
  $SUBEXEC echo -n  # Run sudo/doas again
  if [ $? != 0 ]; then
    echo -e "\nAuthentication failure. Quitting ..."
    exit 1
  fi
fi

# run native package manager updates
if [ "$SYS_PKG" == "apt" ]; then
  PACUP_APT
fi

# exit if the user chose the native only option
if [ "$PACUP_MOD" == "native"]; then
    exit 0
fi

PACUP_SYS
echo -e "\nCompleted update"
exit 0
